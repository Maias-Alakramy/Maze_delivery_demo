#VRML_SIM R2023b utf8
# Generates a maze out of a specifically formatted TeX file.
# template language: javascript

EXTERNPROTO "./MazeWall.proto"

PROTO MazeCodegen [
  field SFVec3f translation 0 0 0
  field SFRotation rotation 0 0 1 0
  field SFString name "solid"
  field SFString url "worlds/textures/sidt-codegen.tex"
  field SFVec2f size 10 10
  field SFFloat width .36
  field SFFloat height .2
]
{
%<
  const data = wbfile.readTextFile(context.project_path + fields.url.value);


  let targetWidth = fields.size.value.x, targetHeight = fields.size.value.y;
  let dataWidth = 1, dataHeight = 1;
  let paths = [];
  
  //#region Data Parsing
  
  const regex = {
      size: /^\\begin{pspicture}\(([\d.]+),([\d.]+)\)$/,
      path: /^\\(?:newpath)$/,
      close: /^\\(?:closepath)$/,
      vertex: /^\\(?:lineto|moveto)\(([\d.]+),([\d.]+)\)$/,
  }
  
  let pathBuffer = [];
  function newPath() {
      if (pathBuffer.length === 0) return;
      paths.push(pathBuffer);
      pathBuffer = [];
  }
  
  for (const line of data.split('\n')) {
      const sizeMatch = regex.size.exec(line);
      const pathMatch = regex.path.test(line);
      const closeMatch = regex.close.test(line);
      const vertexMatch = regex.vertex.exec(line);
  
      if (sizeMatch) {
          dataWidth = Number.parseFloat(sizeMatch[1]);
          dataHeight = Number.parseFloat(sizeMatch[2]);
      }
  
      if (pathMatch) newPath();
  
      if (closeMatch) pathBuffer.push([pathBuffer[0][0], pathBuffer[0][1], true]);
  
      if (vertexMatch) {
          pathBuffer.push([
              Number.parseFloat(vertexMatch[1]),
              Number.parseFloat(vertexMatch[2]),
          ]);
      }
  }
  
  newPath();
  
  //#endregion
  
  let scaleX = targetWidth / dataWidth, scaleY = targetHeight / dataHeight;
  let offsetX = -targetWidth / 2, offsetY = -targetHeight / 2;
  
  for (const path of paths) {
      for (const point of path) {
          point[0] = point[0] * scaleX + offsetX;
          point[1] = point[1] * scaleY + offsetY;
      }
  }
  
  const segments = [];
  
  function sq(v) {
    return v * v;
  }
  
  for (const path of paths) {
      const start = segments.length;
      for (let i = 1; i < path.length; i++) {
          const from = path[i - 1], to = path[i];
  
          segments.push({
              id: segments.length,
              x: (from[0] + to[0]) / 2,
              y: (from[1] + to[1]) / 2,
              z: fields.height.value / 4 - segments.length * 1e-3,
              length: (
                Math.sqrt(Math.max(
                  sq(from[0] - to[0]) + sq(from[1] - to[1])
                , 1e-4))
              ),
              width: fields.width.value / 2,
              height: fields.height.value / 2,
              angle: Math.atan2(
                  to[1] - from[1],
                  to[0] - from[0],
              ) - Math.PI * .5,
              close: to[2] ? start : undefined,
          });
      }
  }
  
  function fixJoint(p, n) {
    const a = Math.abs(n.angle - p.angle) * .5;
    const delta_p = Math.abs(Math.tan(a)) * p.width * .5;
    const delta_n = Math.abs(Math.tan(a)) * n.width * .5;
    
    p.x = p.x - Math.sin(p.angle) * delta_p * .5;
    p.y = p.y + Math.cos(p.angle) * delta_p * .5;
    p.length = p.length + delta_p;
    
    n.x = n.x + Math.sin(n.angle) * delta_n * .5;
    n.y = n.y - Math.cos(n.angle) * delta_n * .5;
    n.length = n.length + delta_n;
  }
  
  for (let i = 1; i < segments.length; i++) {
    const p = segments[i-1], n = segments[i];
    fixJoint(p, n);
    if (n.close !== undefined) fixJoint(n, segments[n.close]);
  }
>%

  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    children [
      %< for (const s of segments) { >%
      MazeWall {
        name "%<= 'Wall #' + s.id >%"
        translation %<= s.x >% %<= s.y >% %<= s.z >%
        rotation 0 0 1 %<= s.angle >%
        size %<= s.width >% %<= s.length >% %<= s.height >%
      }
      %< } >%
    ]
  }
}
